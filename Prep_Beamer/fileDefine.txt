 yyunput( c, (pprctextSTDCptr)  )

#ifndef INTSTDCTYPEDEFSTDCINTSTDCSIZESTDCT
STDCTYPEDEFSTDCINTSTDCSIZESTDCT
typedef sizeSTDCt createSTDCsizeSTDCt;
#endif

#ifndef INTSTDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE
STDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE
struct createSTDCbufferSTDCstate
	{
	FILE *createSTDCinputSTDCfile;

	char *createSTDCchSTDCbuf;		/* input buffer */
	char *createSTDCbufSTDCpos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	createSTDCsizeSTDCt createSTDCbufSTDCsize;

	/* Number of characters read into createSTDCchSTDCbuf, not including EOB
	 * characters.
	 */
	int createSTDCnSTDCchars;

	/* Whether we own the buffer - ., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int createSTDCisSTDCourSTDCbuffer;

	/* Whether this is an interactive input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int createSTDCisSTDCinteractive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int createSTDCatSTDCbol;

    int createSTDCbsSTDClineno; /**< The line count. */
    int createSTDCbsSTDCcolumn; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int createSTDCfillSTDCbuffer;

	int createSTDCbufferSTDCstatus;

STDCBUFFERSTDCNEW 0
STDCBUFFERSTDCNORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as INTSTDCEOFSTDCPENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to new
	 * (via pprcrestart()), so that the user can continue scanning by
	 * just pointing pprcin at a new input file.
	 */
STDCBUFFERSTDCEOFSTDCPENDING 2

	};
#endif /* !INTSTDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE */

/* Stack of input buffers. */
static sizeSTDCt createSTDCbufferSTDCstackSTDCtop = 0; /**< index of top of stack. */
static sizeSTDCt createSTDCbufferSTDCstackSTDCmax = 0; /**< capacity of stack. */
static INTSTDCBUFFERSTDCSTATE * createSTDCbufferSTDCstack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * scanner state.
 *
 * Returns the top of the stack, or NULL.
 */
STDCCURRENTSTDCBUFFER ( (createSTDCbufferSTDCstack) \
                          ? (createSTDCbufferSTDCstack)[(createSTDCbufferSTDCstackSTDCtop)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we 