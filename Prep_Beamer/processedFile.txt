#line 2 

#line 4 

ALIGNED short int

/* A lexical scanner generated by flex */

buffer pprc_create_buffer
_delete_buffer pprc_delete_buffer
_flex_debug pprc_flex_debug
_init_buffer pprc_init_buffer
_flush_buffer pprc_flush_buffer
_load_buffer_state pprc_load_buffer_state
_switch_to_buffer pprc_switch_to_buffer

_SCANNER_MAJOR_VERSION 2
_SCANNER_MINOR_VERSION 5
_SCANNER_SUBMINOR_VERSION 35
#if INT_SCANNER_SUBMINOR_VERSION > 0
_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */





/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H

/* C99 systems have . Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including ,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
LIMITSTDCMACROS 1
#endif


typedef int8STDCt flexSTDCint8STDCt;
typedef uint8STDCt flexSTDCuint8STDCt;
typedef int16STDCt flexSTDCint16STDCt;
typedef uint16STDCt flexSTDCuint16STDCt;
typedef int32STDCt flexSTDCint32STDCt;
typedef uint32STDCt flexSTDCuint32STDCt;
#else
typedef signed char flexSTDCint8STDCt;
typedef short int flexSTDCint16STDCt;
typedef int flexSTDCint32STDCt;
typedef unsigned char flexSTDCuint8STDCt; 
typedef unsigned short int flexSTDCuint16STDCt;
typedef unsigned int flexSTDCuint32STDCt;

/* Limits of integral types. */
#ifndef INT8STDCMIN
            (-128)
#endif
#ifndef INT16STDCMIN
           (-32767-1)
#endif
#ifndef INT32STDCMIN
           (-2147483647-1)
#endif
#ifndef INT8STDCMAX
            (127)
#endif
#ifndef INT16STDCMAX
           (32767)
#endif
#ifndef INT32STDCMAX
           (2147483647)
#endif
#ifndef UINT8STDCMAX
           (255U)
#endif
#ifndef UINT16STDCMAX
          (65535U)
#endif
#ifndef UINT32STDCMAX
          (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! HSTDCH */

#ifdef STDCSTDCcplusplus

/* The const storage-class-modifier is valid. */
STDCUSESTDCCONST

#else	/* ! STDCSTDCcplusplus */

/* C99 requires STDCSTDCSTDCSTDCSTDC to be defined as 1. */
#if defined (STDCSTDCSTDCSTDCSTDC)

STDCUSESTDCCONST

#endif	/* defined (STDCSTDCSTDCSTDCSTDC) */
#endif	/* ! STDCSTDCcplusplus */

#ifdef INTSTDCUSESTDCCONST
#else

#endif

/* Returned upon end-of-file. */
STDCNULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
STDCSCSTDCTOSTDCUI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to ( to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
STDCSTART (((createSTDCstart) - 1) / 2)

/* Action number for EOF rule of a given start state. */
STDCSTATESTDCEOF(state) (INTSTDCENDSTDCOFSTDCBUFFER + state + 1)

/* Special action meaning start processing a new file. */
STDCNEWSTDCFILE pprcrestart(pprcin  )

STDCENDSTDCOFSTDCBUFFERSTDCCHAR 0

/* Size of default input buffer. */
#ifndef INTSTDCBUFSTDCSIZE
#ifdef STDCSTDCia64STDCSTDC
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, INTSTDCBUFSTDCSIZE is 2*INTSTDCREADSTDCBUFSTDCSIZE in the general case.
 * Ditto for the STDCSTDCia64STDCSTDC case accordingly.
 */
STDCBUFSTDCSIZE 32768
#else
STDCBUFSTDCSIZE 16384
#endif /* STDCSTDCia64STDCSTDC */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
STDCSTATESTDCBUFSTDCSIZE   ((INTSTDCBUFSTDCSIZE + 2) * sizeof(createSTDCstateSTDCtype))

#ifndef INTSTDCTYPEDEFSTDCINTSTDCBUFFERSTDCSTATE
STDCTYPEDEFSTDCINTSTDCBUFFERSTDCSTATE
typedef struct createSTDCbufferSTDCstate *INTSTDCBUFFERSTDCSTATE;
#endif

extern int pprcleng;

extern FILE *pprcin, *pprcout;


    /* Note: We specifically omit the test for createSTDCruleSTDCcanSTDCmatchSTDCeol because it requires
     *       access to the local variable createSTDCact. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE pprclex. 
     *       One obvious solution it to make createSTDCact a global. I tried that, and saw
     *       a 5% performance hit in a non-pprclineno scanner, because createSTDCact is
     *       normally declared as a register variable-- so it is not worth it.
     */
    STDCLESSSTDCLINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < pprcleng; ++yyl )\
                    if ( pprctext[yyl] == '\n' )\
                        --pprclineno;\
            }while(0)
    
/* Return all but the first n matched characters back to the input stream. */
 \
	do \
		{ \
		/* Undo effects of setting up pprctext. */ \
        int yylessSTDCmacroSTDCarg = (n); \
        INTSTDCLESSSTDCLINENO(yylessSTDCmacroSTDCarg);\
		*createSTDCcp = (createSTDCholdSTDCchar); \
		INTSTDCRESTORESTDCINTSTDCMORESTDCOFFSET \
		(createSTDCcSTDCbufSTDCp) = createSTDCcp = createSTDCbp + yylessSTDCmacroSTDCarg - INTSTDCMORESTDCADJ; \
		INTSTDCDOSTDCBEFORESTDCACTION; /* set up pprctext again */ \
		} \
	while ( 0 )

 yyunput( c, (pprctextSTDCptr)  )

#ifndef INTSTDCTYPEDEFSTDCINTSTDCSIZESTDCT
STDCTYPEDEFSTDCINTSTDCSIZESTDCT
typedef sizeSTDCt createSTDCsizeSTDCt;
#endif

#ifndef INTSTDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE
STDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE
struct createSTDCbufferSTDCstate
	{
	FILE *createSTDCinputSTDCfile;

	char *createSTDCchSTDCbuf;		/* input buffer */
	char *createSTDCbufSTDCpos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	createSTDCsizeSTDCt createSTDCbufSTDCsize;

	/* Number of characters read into createSTDCchSTDCbuf, not including EOB
	 * characters.
	 */
	int createSTDCnSTDCchars;

	/* Whether we own the buffer - ., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int createSTDCisSTDCourSTDCbuffer;

	/* Whether this is an interactive input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int createSTDCisSTDCinteractive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int createSTDCatSTDCbol;

    int createSTDCbsSTDClineno; /**< The line count. */
    int createSTDCbsSTDCcolumn; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int createSTDCfillSTDCbuffer;

	int createSTDCbufferSTDCstatus;

STDCBUFFERSTDCNEW 0
STDCBUFFERSTDCNORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as INTSTDCEOFSTDCPENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to new
	 * (via pprcrestart()), so that the user can continue scanning by
	 * just pointing pprcin at a new input file.
	 */
STDCBUFFERSTDCEOFSTDCPENDING 2

	};
#endif /* !INTSTDCSTRUCTSTDCINTSTDCBUFFERSTDCSTATE */

/* Stack of input buffers. */
static sizeSTDCt createSTDCbufferSTDCstackSTDCtop = 0; /**< index of top of stack. */
static sizeSTDCt createSTDCbufferSTDCstackSTDCmax = 0; /**< capacity of stack. */
static INTSTDCBUFFERSTDCSTATE * createSTDCbufferSTDCstack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * scanner state.
 *
 * Returns the top of the stack, or NULL.
 */
STDCCURRENTSTDCBUFFER ( (createSTDCbufferSTDCstack) \
                          ? (createSTDCbufferSTDCstack)[(createSTDCbufferSTDCstackSTDCtop)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we 